Лекция 7 
Создание распределенное приложение с помощью .NET Remoting
Обзор  .NET Remoting
Он может использоваться для доступа к объектам в домене другого приложения не зависимо от того, находятся ли два объекта внутри одного процесса, в разных процессах или на разных системах.
Удаленные сборки можно сконфигурировать для локальной работы в домене приложения или как часть отдалённого приложения. Если сборка является частью удалённого приложения, то клиент получает, для общения прокси, вместо реального объекта, прокси посылает
 Основные элементы Архитектуры:
Удалённый объект, является объектом, который выполняется на сервере. Клиент не вызывает методы на этом объекте на прямую, а использует для этого прокси. С помощью .NET Remoting легко понять удалённый объект или нет.
MarshalByValueObject никогда не покидает свой домен приложения. Клиент может вызывать методы на удалённом объекте через прокси.
Канал, используется для коммуникаций между клиентом и сервером. Существует клиентская и серверная часть канала. С помощью .NET Framework мы получаем каналы двух типов, которые общаются через TCP/HTTP.  Можно также создать специальный канал, который поддерживает связь с помощью другого протокола. Сообщения посылаются в канал. Они создаются для коммуникаций между клиентом и сервером. И хранят информацию об удалённых объектах именах вызванных методов и всех аргументов.
Форматор определяет как сообщения передаются в канал. Кроме .NET Framework мы получаем также два типа форматоров: SOAP и двоичный. Форматор SOAP можно использовать, для коммуникаций со службами-web, которые не основываются на .NET Framework.  Двоичные форматоры действует значительно быстрее и могут эффективно использоваться в среде Ethernet.
Провайдер формата используется для соединения. Создавая канал, можно выбрать провайдер формата и этот выбор в свою очередь, определяет форматор, который будет использоваться, для передачи данных в канал. 
Прокси. Клиент вызывает методы на прокси, а не на удалённом объекте. Существует два вида прокси прозрачный и реальный. Прозрачный прокси выглядит для клиента, как удалённый объект. Клиент может вызвать методы, реализуемые удаленным объектом на прозрачном прокси. В свою очередь прозрачный прокси вызывает метод Invoke на реальном прокси. Метод Invoke использует приёмник сообщения для передачи сообщения в канал.
Приёмник сообщений, является объектом перехватчика, такие перехватчики имеются как на клиенте, так и на сервере. Приёмник ассоциируется с каналом. Реальный прокси использует его, для передачи сообщения в канал поэтому приёмник, осуществляет, некоторый перехват, прежде чем в сообщения попадают канал.
Активатор, клиент может использовать активатор. Для создания удалённого объекта на сервере или для получения прокси, активированного сервером объекта.
Remoting configuration – является служебным классом для конфигурирования удалённых серверов и клиентов. Этот класс используется для чтения конфигурационных файлов или для динамического конфигурирования удалённых объектов.
Channel Services является служебным классом для регистрации каналов и затем для отправки сообщений в канал.
